// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String       @id @default(uuid())
  name              String
  email             String?      @unique
  password          String    
  role              String       @default("user")
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  isEmailVerified   Boolean      @default(false)
  profile           UserProfile?
  nutrition         Nutrition? 
  histories         History[]
  favorites         Favorite[]
}

model UserProfile {
  id                String        @id @default(uuid())
  userId            String        @unique
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  gender            String
  dateOfBirth       String       
  allergies         String?       @default("Tidak Punya")     
  weight            Int
  height            Int
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt 
}

model Nutrition {
  id                String       @id @default(uuid())
  userId            String       @unique
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)   
  dailyCalorie      Int
  dailyCarbohydrate Int
  dailySugar        Int
  dailyFat          Int
  dailyProtein      Int
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model History {
  id                     String       @id @default(uuid())
  userId                 String
  user                   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  foodName               String
  foodInformation        String
  totalCalorie           Int
  totalCarbohydrate      Int
  totalSugar             Int
  totalFat               Int
  totalProtein           Int
  date                   DateTime     @default(now())
  favorites              Favorite[]
}

model Favorite {
  id                     String          @id @default(uuid())
  userId                 String
  user                   User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  historyId              String
  history                History         @relation(fields: [historyId], references: [id], onDelete: Cascade)
  createdAt              DateTime        @default(now())
}
